<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MAC上iTerm 2安装与使用]]></title>
    <url>%2F2018%2F07%2F08%2FMAC%E4%B8%8AiTerm-2%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[更新日志 2018-05-20 Mac安装powerline 权限问题 一、前言iTerm2是MAC下最好用的终端工具，并且还是免费的。iTerm2 是配置完毕开箱即用的 tmux，有标签变色、智能选中等特色功能。在日常开发中，我们难免会与终端命令打交道，比如使用Git，CocoaPods，Homebrew，Hexo等，下面开始介绍自定义终端样式吧！ 二、目录 下载安装iTerm 2 安装powerline 安装oh-my-zsh 安装字体库fonts 导入配色 主题设置 添加指令高亮效果zsh-syntax-highlighting 快捷键 问题解决 三、下载安装iTerm 2 GitHub 四、安装powerline12345//没有安装pip先安装pipsudo easy_install pip//之后安装powerline（这里可能会报错，可以参考问题解决）pip install powerline-status 五、安装oh-my-zsh1curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 六、安装字体库fonts123456//克隆字体库到本地git clone https://github.com/powerline/fonts.git//安装字体cd fonts./install.sh 安装成功之后输出：123➜ fonts git:(master) ./install.shCopying fonts...Powerline fonts installed to /Users/WENBO/Library/Fonts 七、导入配色 首先到GitHub下载solarized 1git clone https://github.com/altercation/solarized 解压zip文件，进入solarized/iterm2-colors-solarized文件，双击Solarized Dark.itermcolors和Solarized Light.itermcolors进行安装导入，如下图所示 进入系统偏好设置，profiles-&gt;Colors选择刚刚导入的配色方案即可八、主题设置 使用agnoster，下载安装： 123456//克隆主题到本地git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor//安装主题cd oh-my-zsh-agnoster-fcamblor./install 安装成功之后，编辑~/.zshrc文件，将ZSH_THEME改为agnoster 1234# Set name of the theme to load. Optionally, if you set this to &quot;random&quot;# it&apos;ll load a random theme each time that oh-my-zsh is loaded.# See https://github.com/robbyrussell/oh-my-zsh/wiki/ThemesZSH_THEME=&quot;agnoster&quot; 九、添加指令高亮效果zsh-syntax-highlighting 下载文件 12//克隆项目到本地git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 编辑.zshrc文件，在最后添加如下内容 12source /Users/WENBO/zsh-syntax-highlighting/zsh-syntax-highlighting.zshplugins=(zsh-syntax-highlighting) 注意1/Users/WENBO是*.zshrc文件所在路径，这里替换成你自己的就好了 设置成功之后，效果如下： 十、快捷键自己也才安装，先记录下来吧。 说明 快捷键 新建标签 command + t 关闭标签 command + w 切换标签 command + 数字 command + 左右方向键 切换全屏 command + enter 查找 command +f 垂直分屏 command + d 水平分屏 command + shift + d 切换屏幕 command + option + 方向键 command + [ 或 command + ] 查看历史命令 command + ; 查看剪贴板历史 command + shift + h 清除当前行 ctrl + u 到行首 ctrl + a 到行尾 ctrl + e 前进后退 ctrl + f/b (相当于左右方向键) 上一条命令 ctrl + p 搜索命令历史 ctrl + r 删除当前光标的字符 ctrl + d 删除光标之前的字符 ctrl + h 删除光标之前的单词 ctrl + w 删除到文本末尾 ctrl + k 交换光标处文本 ctrl + t 清屏1 command + r 清屏2 ctrl + l 十一、问题解决 brew link python报错12sudo mkdir /usr/local/Frameworkssudo chown $(whoami):admin /usr/local/Frameworks 之后执行，链接成功1brew link python 安装powerline报错Permission denied，原因是没有安装python,，通过homebrew安装python 1brew install python 命令显示？号，如下图所示：解决办法：进入Preference-&gt;Profiles-&gt;Text，做如下配置即可： Mac安装powerline 权限问题，报错如下解决办法：1pip install powerline-status --user -U 十二、结语在掘金上发现了这款终端工具，自己平时也有用到终端工具，于是就尝试给自己的MAC装上这款软件，在安装过程中还是遇到一些问题，不过最后都解决了。如果你也爱好终端命令操作，可以尝试DIY你喜欢的终端样式哦。 参考文章 iTerm 2 &amp;&amp; Oh My Zsh【DIY教程——亲身体验过程】 Mac终端iTerm2配置]]></content>
      <categories>
        <category>MAC</category>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>MAC</tag>
        <tag>item2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cell自适应高度标签]]></title>
    <url>%2F2018%2F07%2F08%2FCell%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[一、本地数据自适应 在做项目意见反馈的时候，需要选择反馈类型，整个界面是UITableView，我现在喜欢用自动布局，用的Masonry布局框架，开始选择类型是放在本地的，用Masonry实现cell高度自适应还算相对简单的，下面是实现数据在本地高度自适应的核心代码，该方法在cell初始化方法中调用：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172- (void)initSubviews &#123; /** &lt;&lt; init subviews &gt; */ CGFloat margin = 15.f; CGFloat spacing = 10.f; CGFloat maxWidth = ScreenWidth; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block UIButton *lastButton = nil; NSInteger count = self.dataArray.count; [self.dataArray enumerateObjectsUsingBlock:^(CYBImageTitleModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.titleLabel.font = FONT(14.f); button.adjustsImageWhenHighlighted = NO; [button setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal]; [button setTitleColor:Color_Orange forState:UIControlStateSelected]; [button setBackgroundImage:obj.image forState:UIControlStateNormal]; [button setBackgroundImage:obj.selectedImage forState:UIControlStateSelected]; [button setTitle:obj.title forState:UIControlStateNormal]; button.tag = kBTN_TAG + idx; button.selected = obj.isSelected; if (obj.isSelected) &#123; tempBtn = button; &#125; [button wb_addTarget:self action:@selector(buttonClicked:)]; [self.contentView addSubview:button]; CGFloat titleWidth = [obj.title boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, 28) options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName : FONT(14.f)&#125; context:nil].size.width + 2 * 8; rowWidth += titleWidth + spacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * margin) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * margin &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * margin; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + spacing; &#125; [button mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastButton) &#123; make.top.equalTo(self.contentView.mas_top).offset(margin); &#125;else &#123; make.top.equalTo(lastButton.mas_bottom).offset(spacing); &#125; make.left.equalTo(self.contentView.mas_left).offset(margin); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastButton.mas_right).offset(spacing); make.top.equalTo(lastButton.mas_top); &#125; make.height.mas_equalTo(@(28)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.equalTo(self.contentView.mas_bottom).offset(-margin); &#125; &#125;]; lastButton = button; &#125;];&#125; 二、网络请求数据高度自适应 后来改需求了，需要从网络请求意见反馈类型，好吧，上面的方法已经有实现高度自适应关键代码了，只要稍作修改就可实现了。但是实现过程并不是想象中那么简单，中间也经理了很多波折。因为时间还是很充裕的，我就考虑到将标签空间封装成一个视图，等要使用的时候自己添加到cell上，并设置上下左右约束，封装完成之后并没有达到我想要的效果，我发现cell根本就撑不起来，我检查了一遍约束，上下左右约束没有遗漏呀，封装的视图WBAutoTagListView核心代码如下，约束实在layoutSubviews设置的： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#pragma mark &lt; Layout &gt;- (void)layoutSubviews &#123; [super layoutSubviews]; CGFloat maxWidth = self.bounds.size.width - _secionInset.left - _secionInset.right; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block WBTagListItem *lastItem = nil; NSInteger count = self.itemArray.count; [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; CGFloat titleWidth = obj.titleWidth; rowWidth += titleWidth + _minimumInteritemSpacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * _minimumInteritemSpacing; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + _minimumInteritemSpacing; &#125; [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastItem) &#123; make.top.equalTo(self.mas_top).offset(_secionInset.top); &#125;else &#123; make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing); &#125; make.left.equalTo(self.mas_left).offset(_secionInset.left); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing); make.top.equalTo(lastItem.mas_top); &#125; make.height.mas_equalTo(@(_itemHeight)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.mas_offset(-_secionInset.bottom).priorityMedium(); &#125; &#125;]; lastItem = obj; &#125;]; NSLog(@&quot;%f&quot;,[self systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height);&#125; 经测试，将该视图添加到控制器的视图上是可以自适应高度的，但是添加的cell上，就无法撑cell高度，尝试了许多写法，还是未能实现，控制台提示了无法算出cell的高度，就给了一个默认高度，顿时都无语了，有知道的大神能告诉我为什么有内容却无法撑起cell高度吗？ 既然封装的视图无法实现cell高度自适应，我就尝试另外的思路方法，既然是cell自适应，那就索性封装一个标签cell吧WBTagListViewCell，为了可复用性，也为WBTagListViewCell添加了一些配置属性，如下： 123456789101112131415161718192021222324252627282930313233343536373839/** &lt; 数据源 &gt; */@property (nonatomic, strong) NSArray &lt;WBTagListModel *&gt;*items;/** &lt; 内边距 默认： UIEdgeInsetsMake(15, 15, 15, 15) &gt; */@property (nonatomic, assign) UIEdgeInsets secionInset;/** &lt; 行间距 默认：15 &gt; */@property (nonatomic, assign) CGFloat minimumLineSpacing;/** &lt; item之间距离 默认：10 &gt; */@property (nonatomic, assign) CGFloat minimumInteritemSpacing;/** &lt; 是否允许点击 默认：YES &gt; */@property (nonatomic, assign) BOOL allowSelection;/** &lt; 是否允许多选 默认：NO &gt; */@property (nonatomic, assign) BOOL allowMultipleSelection;/** &lt; 标签高度 默认：28.f &gt; */@property (nonatomic, assign) CGFloat itemHeight;/** &lt; 标签左右间距 默认：10.f &gt; */@property (nonatomic, assign) CGFloat leftRightMargin;/** &lt; 背景图片 &gt; */@property (nonatomic, copy) NSString *bgImageName;/** &lt; 选中背景图片 &gt; */@property (nonatomic, copy) NSString *selectedBgImageName;/** &lt; 标签颜色 默认：浅灰色 &gt; */@property (nonatomic, strong) UIColor *titleColor;/** &lt; 按钮选中颜色 &gt; */@property (nonatomic, strong) UIColor *titleSelectedColor;/** &lt; 标题大小 默认：14pt &gt; */@property (nonatomic, strong) UIFont *font;/** &lt; 边框宽度 默认：0 &gt; */@property (nonatomic, assign) CGFloat borderWidth;/** &lt; 边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */@property (nonatomic, strong) UIColor *borderColor;/** &lt; 选中边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */@property (nonatomic, strong) UIColor *selectedBorderColor;/** &lt; 圆角大小 默认：0 &gt; */@property (nonatomic, assign) CGFloat cornerRadius;/** &lt; 选中的item &gt; */@property (nonatomic, strong) NSMutableArray *selectedItems;@property (nonatomic, weak) id &lt;WBTagListViewCellDelegate&gt; delegate; 关键实现步骤是重写了cell的updateConstraints，在有数据源的时候调用setNeedsUpdateConstraints，关键代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172- (void)createTagWithData:(NSArray &lt;WBTagListModel *&gt;*)itemsArray &#123; for (UIView *view in self.itemArray) &#123; [view removeFromSuperview]; &#125; [self.itemArray removeAllObjects]; for (NSInteger index = 0; index &lt; itemsArray.count; index ++) &#123; WBTagListItem *item = [WBTagListItem new]; item.title = itemsArray[index].title; item.isSelected = itemsArray[index].isSelected; item.itemTag = index; item.delegate = self; [self.contentView addSubview:item]; [self.itemArray addObject:item]; /** &lt; 默认选中第一个 &gt; */ if (index == 0 &amp;&amp; itemsArray[index].isSelected) &#123; _tempItem = item; [self.selectedItems removeAllObjects]; [self.selectedItems addObject:_tempItem]; &#125; &#125; [self setNeedsUpdateConstraints];&#125;- (void)updateConstraints &#123; [super updateConstraints]; CGFloat maxWidth = self.contentView.bounds.size.width - _secionInset.left - _secionInset.right; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block WBTagListItem *lastItem = nil; NSInteger count = self.itemArray.count; [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; CGFloat titleWidth = obj.titleWidth; rowWidth += titleWidth + _minimumInteritemSpacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * _minimumInteritemSpacing; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + _minimumInteritemSpacing; &#125; [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastItem) &#123; make.top.equalTo(self.contentView.mas_top).offset(_secionInset.top); &#125;else &#123; make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing); &#125; make.left.equalTo(self.contentView.mas_left).offset(_secionInset.left); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing); make.top.equalTo(lastItem.mas_top); &#125; make.height.mas_equalTo(@(_itemHeight)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.equalTo(self.contentView.mas_bottom).offset(-_secionInset.bottom).priorityMedium(); &#125; &#125;]; lastItem = obj; &#125;];&#125; 最后运行效果也贴一张图吧 封装cell在实现过程中，也遇到一些问题，最开始把约束写到layoutSubviews还是无法自适应高度，再就是要考虑到cell复用的问题。不管怎样最后还是实现了自己想要的效果，由于技术有限，可能我有写的不对不好的地方，还请斧正。最后也贴出自动布局和frame布局标签demo，如果觉得对你有帮助，请Star鼓励下吧。三、GitHub DemoAuto：WBAutoTagListViewDemoFrame：WB_TagsViewDemo 参考 Apple官方文档]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[item2自动连接SSH]]></title>
    <url>%2F2018%2F07%2F08%2Fitem2%E8%87%AA%E5%8A%A8%E8%BF%9E%E6%8E%A5SSH%2F</url>
    <content type="text"><![CDATA[目录 1、编辑命令脚本2、配置item2 1、编辑命令脚本 2.1.1 打开item2终端，创建脚本文件CentOSAutoLoginSSH（名字可以自定义）文件，保存在一个你指定的文件夹下： 12345//切换文件夹cd [你要保存的文件夹下]//创建文件touch CentOSAutoLoginSSH 2.1.2 编辑CentOSAutoLoginSSH 1vim CentOSAutoLoginSSH 2.1.3 配置CentOSAutoLoginSSH123456789101112131415161718#!/usr/bin/expect -f #搬瓦工控制面板中的SSH Port set port 2121 #默认用户名root set user root #主机地址 set host 172.16.10.71 #密码 set password mima123456 set timeout -1 spawn ssh -p$port $user@$host expect &quot;*assword:*&quot; send &quot;$password\r&quot; interact expect eof :wq 编辑完成之后:wq保存配置信息。 2、配置item2 2.2.1 item2-&gt;Preference-&gt;Profile添加配置文件，操作如下图所示： 2.2.2 测试免密自动登录，选择顶部菜单Profile中的CentOSAutoLoginSSH，这时可能会报错，因为CentOSAutoLoginSSH没有执行权限，需要执行以下命令：1chmod u+x /Users/user/.ssh/CentOSAutoLoginSSH 然后测试，就实现了免密自动登录了。 2.2.3 然后我们就可以查看shadowsocks文件下的配置文件了1cat /etc/shadowsocks/config.json 参考文章 使用iTerm2快捷连接SSH Mac Item2 SSH免密登录Linux 服务器的两种方式]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>item2</tag>
        <tag>SSH</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode无线真机调试]]></title>
    <url>%2F2018%2F07%2F08%2FXcode%E6%97%A0%E7%BA%BF%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[一、硬性条件 硬件环境MAC、Xcode9 系统Mac OSX 10.12.5、iOS11二、具体操作步骤 将手机用数据线连接到MAC，Xcode-&gt;Devices And Simulators-&gt;Devices中勾选connect via network 点击手机图标，鼠标右键，配置局域网Connect via IP Address 配置完成之后手机图标会有一个地球标志，带表已经连接成功 最后运行项目，就可以无线调试啦]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>LLDB</tag>
        <tag>Xcode</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS定位处理约束冲突]]></title>
    <url>%2F2018%2F07%2F08%2FiOS%E5%AE%9A%E4%BD%8D%E5%A4%84%E7%90%86%E7%BA%A6%E6%9D%9F%E5%86%B2%E7%AA%81%2F</url>
    <content type="text"><![CDATA[一、添加UIViewAlertForUnsatisfiableConstraints断点 添加Symbolic Breakpoints 编辑断点symbol填入 1UIViewAlertForUnsatisfiableConstraints 添加控制台打印action 1po [[UIWindow keyWindow] _autolayoutTrace] 二、定位约束警告冲突 添加好断点之后，当界面有约束冲突，就会触发断点，控制打印如下： 1234567891011121314151617[LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&apos;t want. Try this: (1) look at each constraint and try to figure out which you don&apos;t expect; (2) find the code that added the unwanted constraint or constraints and fix it. ( &lt;MASLayoutConstraint:0x604000ab04a0 UIButton:0x7faf99f04010.width == 40&gt;, &lt;MASLayoutConstraint:0x604000ab66e0 UIButton:0x7faf99f04010.left == CYBButtonView:0x7faf99f83360.left + 10&gt;, &lt;MASLayoutConstraint:0x604000abaa00 UILabel:0x7faf99f5f8e0.left == UIButton:0x7faf99f04010.right&gt;, &lt;MASLayoutConstraint:0x604000abd580 UILabel:0x7faf99f5f8e0.left == CYBButtonView:0x7faf99f83360.left + 15&gt;,)Will attempt to recover by breaking constraint &lt;MASLayoutConstraint:0x604000ab04a0 UIButton:0x7faf99f04010.width == 40&gt;Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKit/UIView.h&gt; may also be helpful. 根据提示，找到约束有问题的控件地址0x7faf99f04010，然后全局搜索，就能找到具体是哪个控件 如果控制台打印不够直观看出是哪个控件约束有问题，我们可以通过 LLDB命令工具chisel定位寻找。 三、解决冲突通常解决冲突的方法有： 删除多余约束 修改约束优先级 参考1、How to trap on UIViewAlertForUnsatisfiableConstraints?]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Chisel</tag>
        <tag>Xcode</tag>
        <tag>Objective-C</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chisel-LLDB调试助手]]></title>
    <url>%2F2018%2F07%2F08%2FChisel-LLDB%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B%2F</url>
    <content type="text"><![CDATA[Chisel is a collection of LLDB commands to assist debugging iOS apps. 目录 GitHub地址 安装 常用常用Commands 推荐博客 一、GitHub地址Chisel 二、安装 未安装Homrebrew，先安装Homrebrew参考MAC上Homebrew常用命令 安装Chisel 1brew install chisel 如果没有创建.lldbinit文件，则在终端创建文件 12touch .lldbinit //open .lldbinit 编辑.lldbinit文件，并添加以下内容command script import /usr/local/opt/chisel/libexec/fblldb.py 123456vim .lldbinit//添加以下内容# ~/.lldbinit...command script import /path/to/fblldb.py 最后wq保存，重启Xcode，就可以使用Chisel了。 三、常用Commands 命令 命令描述 iOS OS X pviews Print the recursive view description for the key window. YES YES pvc Print the recursive view controller description for the key window. YES NO visualize Open a UIImage, CGImageRef, UIView, CALayer, NSData (of an image), UIColor, CIColor, or CGColorRef in Preview.app on your Mac. YES NO fv Find a view in the hierarchy whose class name matches the provided regex. YES NO fvc Find a view controller in the hierarchy whose class name matches the provided regex. YES NO show/hide Show or hide the given view or layer. You don’t even have to continue the process to see the changes! YES YES mask/unmask Overlay a view or layer with a transparent rectangle to visualize where it is. YES NO border/unborder Add a border to a view or layer to visualize where it is. YES YES caflush Flush the render server (equivalent to a “repaint” if no animations are in-flight). YES YES bmessage Set a symbolic breakpoint on the method of a class or the method of an instance without worrying which class in the hierarchy actually implements the method. YES YES wivar Set a watchpoint on an instance variable of an object. YES YES presponder Print the responder chain starting from the given object. YES YES … … … … 就介绍这么多了，现在自己用到的也并不算太多，做下记录，方便自己以后查阅，有兴趣的朋友可以自行了解其用法吧。 推荐博客1、LLdb篇2教你使用faceBook的chisel来提高调试效率2、Chisel-LLDB命令插件，让调试更Easy]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>LLDB</tag>
        <tag>Terminal</tag>
        <tag>Chisel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS优秀三方开源库整理，了解一下]]></title>
    <url>%2F2018%2F07%2F08%2FiOS%E4%BC%98%E7%A7%80%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[一、前言 在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。 Github整理的地址：WBCollectOCThirdLibWBCollectSwfitThirdLib 二、Objective-C三方开源库 表格侧滑菜单 [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell) - **6300 star** [SWTableViewCell](https://github.com/CEWendel/SWTableViewCell) - **7088 star** [ZJSwipeTableView](https://github.com/jasnig/ZJSwipeTableView) - **7 star** 表格高度缓存库 [FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell) - **8992 star** [HYBMasonryAutoCellHeight](https://github.com/CoderJackyHuang/HYBMasonryAutoCellHeight) - **595 star** 表格刷新控件 [MJRefresh](https://github.com/CoderMJLee/MJRefresh) - **12006 star** [KafkaRefresh](https://github.com/OpenFeyn/KafkaRefresh) - **627 star** 弹出菜单（类似微信弹出菜单） [FTPopOverMenu](https://github.com/liufengting/FTPopOverMenu) - **712 star** [kxmenu](https://github.com/kolyvan/kxmenu) - **1776 star** [PopMenuTableView](https://github.com/KongPro/PopMenuTableView) - **217 star** 导航栏 [FDFullscreenPopGesture](https://github.com/forkingdog/FDFullscreenPopGesture) - **5010 star** [KMNavigationBarTransition](https://github.com/MoZhouqi/KMNavigationBarTransition) - **2549 star** [RTRootNavigationController](https://github.com/rickytan/RTRootNavigationController) - **1333 star** [WRNavigationBar](https://github.com/wangrui460/WRNavigationBar) - **1852 star** 动画 [lottie-ios](https://github.com/airbnb/lottie-ios) - **14103 star** [pop](https://github.com/facebook/pop) - **19064 star** [LSAnimator](https://github.com/Lision/LSAnimator) **1238 star** 分段控件 [HMSegmentedControl](https://github.com/HeshamMegid/HMSegmentedControl) - **3392 star** 富文本编辑 [ZSSRichTextEditor](https://github.com/nnhubbard/ZSSRichTextEditor) - **2891 star** 弹幕 [HJDanmakuDemo](https://github.com/panghaijiao/HJDanmakuDemo) - **717 star** 滚动视图 [SwipeView](https://github.com/nicklockwood/SwipeView) - **2611 star** 滚动视图嵌套 [HJTabViewController](https://github.com/panghaijiao/HJTabViewController) - **191 star** [LTScrollView](https://github.com/gltwy/LTScrollView) - **236 star** 红点提示 [JSBadgeView](https://github.com/JaviSoto/JSBadgeView) - **1209 star** [WZLBadge](https://github.com/weng1250/WZLBadge) - **1603 star** 键盘 [IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager) - **11697 star** [MMNumberKeyboard](https://github.com/matmartinez/MMNumberKeyboard) - **911 star** [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding) - **5568 star** 界面布局 [FlexLib](https://github.com/zhenglibao/FlexLib) - **496 star** [Masonry](https://github.com/SnapKit/Masonry) - **16526 star** [SDAutoLayout](https://github.com/gsdios/SDAutoLayout) - **5241 star** [WHC_AutoLayoutKit](https://github.com/netyouli/WHC_AutoLayoutKit) - **786 star** 进度指示器 [DACircularProgress](https://github.com/danielamitay/DACircularProgress) - **2307 star** [SDProgressView](https://github.com/gsdios/SDProgressView) - **378 star** 开发模式 [KVOController](https://github.com/facebook/KVOController) - **6524 star** 控制器切换 [DWQListOfDifferentOrderStatus](https://github.com/DevelopmentEngineer-DWQ/DWQListOfDifferentOrderStatus) **12 star** [HYPageView](https://github.com/runlhy/HYPageView) - **74 star** [SGPagingView](https://github.com/kingsic/SGPagingView) - **822 star** [WMPageController](https://github.com/wangmchn/WMPageController) - **2229 star** [ZJScrollPageView](https://github.com/jasnig/ZJScrollPageView) - **847 star** 数据存储 [fmdb](https://github.com/ccgus/fmdb) - **12533 star** [BGFMDB](https://github.com/huangzhibiao/BGFMDB) - **771 star** [JKDBModel](https://github.com/Haley-Wong/JKDBModel) - **683 star** [JRDB](https://github.com/scubers/JRDB) - **480 star** [LKDBHelper-SQLite-ORM](https://github.com/li6185377/LKDBHelper-SQLite-ORM) - **980 star** 数据转模型 [MJExtension](https://github.com/CoderMJLee/MJExtension) - **7667 star** [YYModel](https://github.com/ibireme/YYModel) - **3589 star** [Mantle](https://github.com/Mantle/Mantle) - **11023 star** [jsonmodel](https://github.com/jsonmodel/jsonmodel) - **6559 star** [GDataXML-HTML](https://github.com/graetzer/GDataXML-HTML) - **261 star** 搜索 [PYSearch](https://github.com/ko1o/PYSearch) - **2976 star** 提示框架 [MBProgressHUD](https://github.com/jdg/MBProgressHUD/tree/master) - **14618 star** [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD) - **11046 star** [JGProgressHUD](https://github.com/JonasGessner/JGProgressHUD) - **2257 star** [KSToastView](https://github.com/c0ming/KSToastView) - **91 star** [MMPopupView](https://github.com/adad184/MMPopupView) - **1910 star** [SCLAlertView](https://github.com/dogo/SCLAlertView) - **3084 star** [Toast](https://github.com/scalessec/Toast) - **3085 star** 图表绘制 [AAChartKit](https://github.com/AAChartModel/AAChartKit) - **2241 star** [JHChart](https://github.com/China131/JHChart) - **508 star** [ZFChart](https://github.com/Zirkfied/ZFChart) - **670 star** [DVPieChart](https://github.com/FireMou/DVPieChart) - **63 star** [DVLineChart](https://github.com/FireMou/DVLineChart) - **56 star** 图片缓存框架 [SDWebImage](https://github.com/rs/SDWebImage) - **22089 star** [FLAnimatedImage](https://github.com/Flipboard/FLAnimatedImage) - **6691 star** [iOS-WebP](https://github.com/seanooi/iOS-WebP) - **739 star** [YYWebImage](https://github.com/ibireme/YYWebImage) - **3195 star** 图片浏览 [MWPhotoBrowser](https://github.com/mwaterfall/MWPhotoBrowser) - **8238 star** [PYPhotoBrowser](https://github.com/ko1o/PYPhotoBrowser) - **1782 star** [SDPhotoBrowser](https://github.com/gsdios/SDPhotoBrowser) - **962 star** [STPhotoBrowser](https://github.com/STShenZhaoliang/STPhotoBrowser) - **299 star** [KSPhotoBrowser](https://github.com/skx926/KSPhotoBrowser) - **457 star** 图片轮播 [SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView) - **4921 star** [HYBLoopScrollView](https://github.com/CoderJackyHuang/HYBLoopScrollView) - **615 star** [TXScrollLabelView](https://github.com/tingxins/TXScrollLabelView) - **497 star** 图片拾取 [TZImagePickerController](https://github.com/banchichen/TZImagePickerController) - **5065 star** [CTAssetsPickerController](https://github.com/chiunam/CTAssetsPickerController) - **2142 star** [DNImagePicker](https://github.com/AwesomeDennis/DNImagePicker) - **365 star** [HXWeiboPhotoPicker](https://github.com/KeenTeam1990/HXWeiboPhotoPicker) - **7 star** 3D效果图 [HelloPanoramaGL](https://github.com/heroims/HelloPanoramaGL) - **39 star** 网络请求 [AFNetworking](https://github.com/AFNetworking/AFNetworking) - **31246 star** [YTKNetwork](https://github.com/yuantiku/YTKNetwork) - **5385 star** [PPNetworkHelper](https://github.com/jkpang/PPNetworkHelper) - **1180 star** [HYBNetworking](https://github.com/CoderJackyHuang/HYBNetworking) - **541 star** [SJNetwork](https://github.com/knightsj/SJNetwork) - **153 star** 网络状态监测 [Reachability](https://github.com/tonymillion/Reachability) - **6665 star** 文件下载 [TWRDownloadManager](https://github.com/chasseurmic/TWRDownloadManager) - **366 star** [ZFDownload](https://github.com/renzifeng/ZFDownload) - **291 star** 旋转木马 [iCarousel](https://github.com/nicklockwood/iCarousel) - **10628 star** [NewPagedFlowView](https://github.com/PageGuo/NewPagedFlowView) - **512 star** 音视频 [ijkplayer](https://github.com/Bilibili/ijkplayer) - **19602 star** [ZFPlayer](https://github.com/renzifeng/ZFPlayer) - **4539 star** [WMPlayer](https://github.com/zhengwenming/WMPlayer) - **2397 star** [TBPlayer](https://github.com/suifengqjn/TBPlayer) - **1125 star** [TTAVPlayer](https://github.com/tangdiforx/TTAVPlayer) - **118 star** 占位图 [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet) - **10439 star** [LYEmptyView](https://github.com/dev-liyang/LYEmptyView) - **657 star** C语言扩展库 [libextobjc](https://github.com/jspahrsummers/libextobjc) - **3936 star** Socket编程 [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) - **10193 star** [SocketRocket](https://github.com/facebook/SocketRocket) - **7833 star** [socket.io](https://github.com/socketio/socket.io) - **42419 star** [MQTTKit](https://github.com/mobile-web-messaging/MQTTKit) - **407 star** 内存泄露检测工具 [MLeaksFinder](https://github.com/Tencent/MLeaksFinder) - **3568 star** [FBRetainCycleDetector](https://github.com/facebook/FBRetainCycleDetector) - **3068 star** YYKit [YYKit](https://github.com/ibireme/YYKit) - **12185 star** LOG工具 [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) - **10382 star** OC与JS交互 [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge) - **11017 star** 输入框占位符 [UITextView-Placeholder](https://github.com/devxoul/UITextView-Placeholder) - **797 star** [RPFloatingPlaceholders](https://github.com/iwasrobbed/RPFloatingPlaceholders) - **1115 star** [SZTextView](https://github.com/glaszig/SZTextView) - **652 star** 分类 [JKCategories](https://github.com/shaojiankui/JKCategories) - **2770 star** 图像处理 [GPUImage](https://github.com/BradLarson/GPUImage) - **17606 star** iOS开发知识集合 [iOS-Tips](https://github.com/awesome-tips/iOS-Tips) - **2187 star** 面试题集锦 [iOSInterviewQuestions](https://github.com/ChenYilong/iOSInterviewQuestions) - **6809 star** [iOS-InterviewQuestion-collection](https://github.com/liberalisman/iOS-InterviewQuestion-collection) - **1019 star** 三方开源库分析 [analyze](https://github.com/Draveness/analyze) - **6077 star** 三、Swift三方开源库 动画 [NVActivityIndicatorView](https://github.com/ninjaprox/NVActivityIndicatorView) - **7098 star** 网络请求 [Alamofire](https://github.com/Alamofire/Alamofire) - **28292 star** 占位图 [SkeletonView](https://github.com/Juanpe/SkeletonView) - **5083 star** 二维码扫描 [EFQRCode](https://github.com/EyreFree/EFQRCode) - **2751 star** 布局框架 [SnapKit](https://github.com/SnapKit/SnapKit) - **12978 star** 图表绘制 [Charts](https://github.com/danielgindi/Charts) - **18605 star** 四、结语 上面这些三方开源库按照自己的理解分类整理了一遍，其中OC语言库居多，自己现在也是基于OC开发，Swift收集的相对较少，这些库也是自己现在所了解到的，当然还有很多优秀的三方库自己也未发现和接触，我以后会不断在这篇博客中更新优秀的三方开源库。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GitHub</tag>
        <tag>Objective-C</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitPages+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F07%2F07%2FGitPages-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[如果你想从零开始搭建一个属于自己的静态博客网站，可以参考下面三篇博文，这三篇博文是记录我从零开始搭建自己静态博客的全过程，希望能给需要的朋友一些参考： GitPages+Hexo搭建个人博客 Hexo相关配置和使用 Hexo-NexT配置超炫网页效果 最终成果： blogwenbo.com 一、GitHub创建项目 1.1 使用GitPages搭建自己静态博客前提要注册申请GitHub账号。GitHub相关配置可参考这篇文章：MAC上Git安装与GitHub基本使用。 1.2 GitHub上新创建一个wenmobo.github.io仓库，wenmobo是我的账号名，这里替换成你自己的就可以了。项目格式名称为[用户名].github.io，如下：1username.github.io 创建成功之后如下： 1.3 在桌面新建一个文件夹MyBlog，cd到该文件夹，将项目克隆到本地：1git clone git@github.com:wenmobo/wenmobo.github.io.git 二、安装Node.js 2.1 Node.js支持用HomeBrew安装，首先要安装Homebrew，Homebrew安装可查看这篇文章：MAC上Homebrew常用命令整理 2.2 Homebrew安装好之后，用Homebrew安装Node.js，终端输入：1brew node 三、安装hexo 3.1 安装hexo，终端输入： 1npm install -g hexo-cli 3.2 在本地仓库MyBlog新建文件夹Blog，然后在终端cd [Blog文件夹路径]，执行以下命令初始化博客： 123456hexo init//或者hexo init &lt;folder&gt;cd &lt;folder&gt;npm instal 成功之后，目录文件如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 3.3 查看本地效果，终端输入：1hexo s 终端输出：123WMBdeMacBook-Pro:Hexo WENBO$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 将http://localhost:4000/.拷贝到Chome浏览器，查看效果，如下图所示： 四、总结 GitHubPages+Hexo搭建静态博客的准备工作到这里都完成了，下面一篇文章：Hexo相关配置和使用会介绍Hexo相关配置。 五、参考文章1、GithubPages教程 在GithubPages上搭建个人主页2、在Github上使用Hexo搭建个人博客3、如何使用hexo搭建个人博客（Mac OS系统，windows仅作参考）4、Hexo博客主题推荐]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>GitPages</tag>
      </tags>
  </entry>
</search>
